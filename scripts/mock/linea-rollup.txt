
bridge : https://bridge.linea.build/

## L1 => L2

goerli -> linea: 0x5506A3805fB8A58Fa58248CC52d2b06D92cA94e6
	
	1、goerli 0x113d7546f66555C8124a71a2886Ac855272e4ab1(erc20 token) 授权给 0xaA012D038E6440535Ec66eDf2DA592F4F8398133.
	
	2、调用goerli: 0x5506A3805fB8A58Fa58248CC52d2b06D92cA94e6 上的 bridgeToken 的方法
		三个参数:
		_token: erc20 token
		_amount: bridge erc20 amount
		_recipient: receiver of erc20 token

		bridgeToken(value): 这是支付给邮递员消息服务以自动执行第二层传输的费用。用户最终将收到_fee。

	3、后端监控goerli链 BridgingInitiated(0x5506A3805fB8A58Fa58248CC52d2b06D92cA94e6) 事件, 并取到 MessageSent(0x70bad09280fd342d02fe64119779bc1f0791bac2) 事件内的所有数据
	
	4、监控linea 链上 message 合约的(官方会调用addL1L2MessageHashes 方式) L1L2MessageHashesAddedToInbox 事件(0xc499a572640b64ea1c8c194c43bc3e19940719dc), 监控 是否含有对应 的 messageHash, 有则可以进行接下来的行为

	5、前端 在 linea 上 调用 claimMessage(0xc499a572640b64ea1c8c194c43bc3e19940719dc) 填入 MessageSent 的数据



	example:
		前端调用即后端监控 https://goerli.etherscan.io/tx/0xcf46b1419cb818f03edba8168a9405cad0ea66878aee0e67f7b66243ee75d7bc (bridgeToken, 前端调用, 后端监控 BridgingInitiated & MessageSent, 需要拿到 messageHash)
		
		中间后端监控到 https://goerli.lineascan.build/tx/0xcbd8b70f81f7a9272a67d0c0ad8ba09c7d2b25b6f59dfb7d6a3302f99dfbc8df#eventlog (在linea 上 监控 L1L2MessageHashesAddedToInbox 事件, 直到 确认 有 goerli 上的messageHash)

		前端调用即后端监控 https://goerli.lineascan.build/tx/0x9f6028e0adb22551677b8da6401e1c542cda13cd959d3ce0753ab37c5260b899




## L2 => L1

linea -> goerli: 0xb191e3d98074f92584e5205b99c3f17fb2068927

	1、linea 0xd64134a65ae475927ed2711b967a5f08702615cd(goerli 上的erc20 token 在linea 上的映射 erc20 地址) 授权给 0xb191e3d98074f92584e5205b99c3f17fb2068927
	
	2、调用 0xb191e3d98074f92584e5205b99c3f17fb2068927 上的 上的 bridgeToken 的方法, 要给0.001 eth. 

	3、监控到 linea 链上 的 BridgingInitiated (0xb191e3d98074f92584e5205b99c3f17fb2068927) ,并取到 MessageSent(0xc499a572640b64ea1c8c194c43bc3e19940719dc) 事件内的所有数据, 同时要包含这笔交易blockNumber

	4、监控goerli 链上 的 BlockFinalized (0x70bad09280fd342d02fe64119779bc1f0791bac2) 事件, 如果 该事件内的block number 大于等于 linea 链上的 这笔 bridge 的block, 则表示可以在 goerli 上进行 claim message 操作

	5、前端 进行 claimMessage 调用



	example:
		前端调用即后端监控 https://goerli.lineascan.build/tx/0xb4e9e4170bbd8c17878896e8154e7ac9e2a61411b7561d2c20e7df36b61d5de2 (bridgeToken, 前端调用, 后端监控 BridgingInitiated & MessageSent, 需要拿到 messageHash)

		中间监控 https://goerli.etherscan.io/tx/0x8643a6e3c04351b0db018eed8b5da126d6568e4fd0fa1779342a5dcc89bb1610#eventlog (后端监控 BlockFinalized)

		前端调用即后端监控 https://goerli.etherscan.io/tx/0x50637e79c45e114d18536f30329d5b30d4e8e491f694124d09bfb31e757b92f5


## erc20 token(mock)

erc20:
	goerli : 0x113d7546f66555c8124a71a2886ac855272e4ab1
	linea: 0xd64134a65ae475927ed2711b967a5f08702615cd

goerli:
	bridgeToken: 0x5506A3805fB8A58Fa58248CC52d2b06D92cA94e6 (从 goerli -> linea 发起交易)
	BlockFinalized(event): 0x70BaD09280FD342D02fe64119779BC1f0791BAC2 (监控 blockNumber 是否到达 (linea -> goerli) 发起交易时的块 )
	claimMessage: 0x70BaD09280FD342D02fe64119779BC1f0791BAC2
linea:
	bridgeToken: 0x3ccd0f623b7a25eab5dfc6a3fd723dce5520489b
	L1L2MessageHashesAddedToInbox(event): 0xc499a572640b64ea1c8c194c43bc3e19940719dc (监控 goerli 桥的MessageSent 的 message hash )
	claimMessage: 0xc499a572640b64ea1c8c194c43bc3e19940719dc
	





---------------------------- 主网 -----------------------


主网:
	peel:
		ether: 0x1ed81e03d7ddb67a21755d02ed2f24da71c27c55
		linea: 0xa6eb75b11b36fb9175fb94c5b96959879a26c2a8

	ether-> linea:
		bridgeToken: https://etherscan.io/tx/0xd22b90dc033097f27ce265b9f6b843259a927f95715b28fbf30088b29539e90f
		claimMessage: https://lineascan.build/tx/0xc48e94a31e8587564d1dcc8a69150d33998cc78fcd1186491d64371334e9be33
	linea->ether:
		bridgeToken: https://lineascan.build/tx/0x952754b7754bd98a68d3a2cf2e5bcd3b9032492a1d7a65797adf67d8fe6422e2 (要付0.001 eth)
		claimMessage: 

	ether:
		bridgeToken: 0x051F1D88f0aF5763fB888eC4378b4D8B29ea3319
		BlockFinalized(event): 0xd19d4b5d358258f05d7b411e21a1460d11b0876f
	linea:
		L1L2MessageHashesAddedToInbox(event): 0x508ca82df566dcd1b0de8296e70a96332cd644ec (监控 goerli 桥的MessageSent 的 message hash )
		bridgeToken: 0x353012dc4a9a6cf55c941badc267f82004a8ceb9

		

